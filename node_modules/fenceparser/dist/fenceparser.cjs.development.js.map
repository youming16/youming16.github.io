{"version":3,"file":"fenceparser.cjs.development.js","sources":["../src/utils.ts","../src/Lexer.ts","../src/Parser.ts","../src/index.ts"],"sourcesContent":["export type Token = string | number | boolean\n\nexport const isQuoted = (s: string) => {\n  const first = s[0]\n  const last = s[s.length - 1]\n\n  return s.length > 1 && first === last && (first === '\"' || last === \"'\")\n}\n\nexport class Iterator<T extends string | Array<Token>> {\n  protected error(err: string) {\n    throw new Error(`Fenceparser: ${err}.`)\n  }\n\n  protected start = 0\n  protected current = 0\n\n  protected peek(n?: number): T[number] {\n    return this.input[this.current + (n ?? 0)]\n  }\n\n  protected advance(): T[number] {\n    return this.input[this.current++]\n  }\n\n  protected isAtEnd() {\n    return this.current >= this.input.length\n  }\n\n  public constructor(protected readonly input: T) {}\n}\n","import {Iterator, Token} from './utils'\n\nexport const lex = (input: string) => new Lexer(input).scan()\n\nconst KEYWORDS: Record<string, Token> = {\n  true: true,\n  false: false\n}\n\nconst isAlpha = (s: string) => /[a-zA-Z_$-]/.test(s)\nconst isNumeric = (s: string) => /[0-9]/.test(s)\nconst isAlphaNumeric = (s: string) => isAlpha(s) || isNumeric(s)\n\nclass Lexer extends Iterator<string> {\n  private output: Array<Token> = []\n\n  private string(quote: string) {\n    while (this.peek() !== quote && !this.isAtEnd()) this.advance()\n\n    if (this.isAtEnd()) {\n      this.error('Unterminated string')\n    }\n\n    this.advance()\n    this.output.push(this.input.substring(this.start, this.current))\n  }\n\n  private number() {\n    while (isNumeric(this.peek()) && !this.isAtEnd()) this.advance()\n\n    if (this.peek() === '-' && isNumeric(this.peek(1))) {\n      this.advance()\n      while (isNumeric(this.peek())) this.advance()\n      this.output.push(this.input.substring(this.start, this.current))\n      return\n    } else if (this.peek() === '.' && isNumeric(this.peek(1))) {\n      this.advance()\n      while (isNumeric(this.peek())) this.advance()\n    }\n\n    this.output.push(parseFloat(this.input.substring(this.start, this.current)))\n  }\n\n  private identifier() {\n    while (isAlphaNumeric(this.peek()) && !this.isAtEnd()) this.advance()\n\n    const text = this.input.substring(this.start, this.current)\n    if (Object.keys(KEYWORDS).includes(text)) {\n      this.output.push(KEYWORDS[text])\n    } else {\n      this.output.push(text)\n    }\n  }\n\n  public scan() {\n    while (!this.isAtEnd()) {\n      this.start = this.current\n\n      const next = this.advance()\n      switch (next) {\n        case '{':\n        case '}':\n        case '=':\n        case ',':\n        case ':':\n        case '[':\n        case ']':\n          this.output.push(next)\n          break\n        case '\"':\n        case \"'\":\n          this.string(next)\n          break\n        case ' ':\n        case '\\r':\n        case '\\t':\n        case '\\n':\n          break\n        default:\n          if (isNumeric(next)) {\n            this.number()\n          } else if (isAlpha(next)) {\n            this.identifier()\n          } else {\n            this.error(`Unexpected character ${next}`)\n          }\n      }\n    }\n\n    return this.output\n  }\n}\n","import {isQuoted, Iterator, Token} from './utils'\n\n// Grammar - Recursive Descent\n//\n// MAIN → EXPR*\n// EXPR → OBJECT | IDENTIFIER (= VALUE)?\n//\n// OBJECT → { OBJECT_VALUES? }\n// OBJECT_VALUES → OBJECT_VALUE (, OBJECT_VALUE)*\n// OBJECT_VALUE → NUMBER | IDENTIFIER | (IDENTIFIER | STRING | NUMBER): VALUE\n//\n// ARRAY → [ ARRAY_VALUES? ]\n// ARRAY_VALUES → (ARRAY_VALUE) (ARRAY_VALUE)*\n// ARRAY_VALUE → VALUE\n//\n// VALUE → IDENTIFIER | OBJECT | ARRAY | (\"|') STRING (\"|') | BOOLEAN | NUMBER\n// IDENTIFIER → STRING\n\nexport type OBJECT = {[key in string | number]: VALUE}\nexport type VALUE = OBJECT | Array<VALUE> | string | boolean | number\n\nexport const parse = (input: Array<Token>) => new Parser(input).parse()\n\nclass Parser extends Iterator<Array<Token>> {\n  private output: Record<string, VALUE> = {}\n\n  private object() {\n    const result: OBJECT = {}\n    const parseValue = () => {\n      let identifier = this.advance()\n\n      if (typeof identifier === 'number') {\n        identifier = identifier as number\n      } else if (typeof identifier === 'string' && isQuoted(identifier)) {\n        identifier = identifier.slice(1, -1)\n      }\n      identifier = identifier as string\n\n      if (this.peek() === ':') {\n        this.advance()\n        result[identifier] = this.value()\n      } else {\n        result[identifier] = true\n      }\n    }\n\n    this.advance()\n    if (this.peek() !== '}') {\n      parseValue()\n      while (this.peek() === ',') {\n        this.advance()\n        if (this.peek() === '}') {\n          this.error('Trailing comma')\n        }\n        parseValue()\n      }\n    }\n\n    if (this.advance() !== '}') {\n      this.error('Unterminated object')\n    }\n    return result\n  }\n\n  private array() {\n    const result: Array<VALUE> = []\n\n    this.advance()\n    if (this.peek() !== ']') {\n      result.push(this.value())\n      while (this.peek() === ',') {\n        this.advance()\n        if (this.peek() === ']') {\n          this.error('Trailing comma')\n        }\n        result.push(this.value())\n      }\n    }\n    if (this.advance() !== ']') {\n      this.error('Unterminated array')\n    }\n    return result\n  }\n\n  private value(): VALUE {\n    if (this.peek() === '{') {\n      return this.object()\n    } else if (this.peek() === '[') {\n      return this.array()\n    } else if (\n      typeof this.peek() === 'string' &&\n      isQuoted(this.peek() as string)\n    ) {\n      return (this.advance() as string).slice(1, -1)\n    } else {\n      return this.advance()\n    }\n  }\n\n  public parse() {\n    if (this.input.length < 1) {\n      return null\n    }\n\n    while (!this.isAtEnd()) {\n      const peeked = this.peek()\n\n      if (peeked === '{') {\n        if (!this.output.highlight) {\n          this.output.highlight = {}\n        }\n\n        this.output.highlight = {\n          ...(this.output.highlight as OBJECT),\n          ...this.object()\n        }\n      } else {\n        const identifier = this.advance() as string\n\n        if (this.peek() === '=') {\n          this.advance()\n          this.output[identifier] = this.value()\n        } else {\n          this.output[identifier] = true\n        }\n      }\n    }\n\n    return this.output\n  }\n}\n","import {lex} from './Lexer'\nimport {parse} from './Parser'\n\nexport {lex, parse}\nexport default (input: string) => parse(lex(input))\n"],"names":["isQuoted","s","first","last","length","Iterator","input","error","err","Error","peek","n","current","advance","isAtEnd","lex","Lexer","scan","KEYWORDS","isAlpha","test","isNumeric","isAlphaNumeric","string","quote","output","push","substring","start","number","parseFloat","identifier","text","Object","keys","includes","next","parse","Parser","object","result","parseValue","slice","value","array","peeked","highlight"],"mappings":"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"}