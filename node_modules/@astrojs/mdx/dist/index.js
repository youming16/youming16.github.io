import { compile as mdxCompile, nodeTypes } from "@mdx-js/mdx";
import mdxPlugin from "@mdx-js/rollup";
import { parse as parseESM } from "es-module-lexer";
import rehypeRaw from "rehype-raw";
import remarkGfm from "remark-gfm";
import remarkShikiTwoslash from "remark-shiki-twoslash";
import remarkSmartypants from "remark-smartypants";
import { VFile } from "vfile";
import { rehypeApplyFrontmatterExport, remarkInitializeAstroData } from "./astro-data-utils.js";
import rehypeCollectHeadings from "./rehype-collect-headings.js";
import remarkPrism from "./remark-prism.js";
import { getFileInfo, parseFrontmatter } from "./utils.js";
const DEFAULT_REMARK_PLUGINS = [
  remarkGfm,
  remarkSmartypants
];
const DEFAULT_REHYPE_PLUGINS = [];
function handleExtends(config, defaults = []) {
  if (Array.isArray(config))
    return config;
  return [...defaults, ...(config == null ? void 0 : config.extends) ?? []];
}
function getRemarkPlugins(mdxOptions, config) {
  let remarkPlugins = [
    remarkInitializeAstroData,
    ...handleExtends(mdxOptions.remarkPlugins, DEFAULT_REMARK_PLUGINS)
  ];
  if (config.markdown.syntaxHighlight === "shiki") {
    const shikiTwoslash = remarkShikiTwoslash.default ?? remarkShikiTwoslash;
    remarkPlugins.push([shikiTwoslash, config.markdown.shikiConfig]);
  }
  if (config.markdown.syntaxHighlight === "prism") {
    remarkPlugins.push(remarkPrism);
  }
  return remarkPlugins;
}
function getRehypePlugins(mdxOptions, config) {
  let rehypePlugins = handleExtends(mdxOptions.rehypePlugins, DEFAULT_REHYPE_PLUGINS);
  if (config.markdown.syntaxHighlight === "shiki" || config.markdown.syntaxHighlight === "prism") {
    rehypePlugins.unshift([rehypeRaw, { passThrough: nodeTypes }]);
  }
  rehypePlugins.unshift(rehypeCollectHeadings);
  return rehypePlugins;
}
function mdx(mdxOptions = {}) {
  return {
    name: "@astrojs/mdx",
    hooks: {
      "astro:config:setup": ({ updateConfig, config, addPageExtension, command }) => {
        addPageExtension(".mdx");
        const mdxPluginOpts = {
          remarkPlugins: getRemarkPlugins(mdxOptions, config),
          rehypePlugins: getRehypePlugins(mdxOptions, config),
          jsx: true,
          jsxImportSource: "astro",
          format: "mdx",
          mdExtensions: []
        };
        updateConfig({
          vite: {
            plugins: [
              {
                enforce: "pre",
                ...mdxPlugin(mdxPluginOpts),
                async transform(code, id) {
                  if (!id.endsWith("mdx"))
                    return;
                  const { data: frontmatter, content: pageContent } = parseFrontmatter(code, id);
                  const compiled = await mdxCompile(new VFile({ value: pageContent, path: id }), {
                    ...mdxPluginOpts,
                    rehypePlugins: [
                      ...mdxPluginOpts.rehypePlugins ?? [],
                      () => rehypeApplyFrontmatterExport(frontmatter)
                    ]
                  });
                  return {
                    code: String(compiled.value),
                    map: compiled.map
                  };
                }
              },
              {
                name: "@astrojs/mdx-postprocess",
                transform(code, id) {
                  if (!id.endsWith(".mdx"))
                    return;
                  const [, moduleExports] = parseESM(code);
                  const { fileUrl, fileId } = getFileInfo(id, config);
                  if (!moduleExports.includes("url")) {
                    code += `
export const url = ${JSON.stringify(fileUrl)};`;
                  }
                  if (!moduleExports.includes("file")) {
                    code += `
export const file = ${JSON.stringify(fileId)};`;
                  }
                  if (command === "dev") {
                    code += `
if (import.meta.hot) {
											import.meta.hot.decline();
										}`;
                  }
                  return code;
                }
              }
            ]
          }
        });
      }
    }
  };
}
export {
  mdx as default
};
